name: Deploy Backend to ECS

on:
  push:
    branches:
      - main
      - dev

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '18'
  #       cache: 'npm'

  #   - name: Install dependencies
  #     run: npm ci

  #   - name: Run tests
  #     run: npm test

  #   - name: Run linting
  #     run: npm run lint

  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    environment: ${{ github.ref_name == 'main' && 'production' || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set environment variables
        run: |
          echo "ENVIRONMENT=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=${{ vars.ECS_CLUSTER_NAME }}" >> $GITHUB_ENV
          echo "SERVICE_NAME=${{ vars.ECS_SERVICE_NAME }}" >> $GITHUB_ENV
          echo "TASK_DEFINITION_FAMILY=${{ vars.ECS_TASK_DEFINITION_FAMILY }}" >> $GITHUB_ENV

      - name: Debug - List directory contents
        run: |
          echo "Current directory: $(pwd)"
          echo "Root directory contents:"
          ls -la ./
          echo "DockerFile contents:"
          cat ./DockerFile

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build image
          docker build -f DockerFile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest-$ENVIRONMENT

          # Push images
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest-$ENVIRONMENT

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition $TASK_DEFINITION_FAMILY \
            --query taskDefinition > task-definition.json

      - name: Update task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ vars.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}
          wait-for-service-stability: true

      - name: Deployment notification
        run: |
          echo "ðŸš€ Deployment completed successfully!"
          echo "Environment: $ENVIRONMENT"
          echo "Cluster: $CLUSTER_NAME"
          echo "Service: $SERVICE_NAME"
          echo "Image: ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:${{ github.sha }}"
