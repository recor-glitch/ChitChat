# Stage 1: Build
FROM golang:1.24-alpine AS builder

WORKDIR /app

# Install git and needed packages for go modules
RUN apk add --no-cache git

# Copy go mod and sum first
COPY go.mod go.sum ./
RUN go mod tidy

# Copy the rest of the app
COPY . .

# Build the Go app
RUN go build -o chitchat-app ./cmd/server

# Stage 2: Runtime
FROM alpine:3.19

WORKDIR /app

# Install ca-certificates, curl, and postgresql-client for database connectivity check
RUN apk add --no-cache ca-certificates curl postgresql-client

# Install migrate tool
RUN curl -L https://github.com/golang-migrate/migrate/releases/download/v4.16.2/migrate.linux-amd64.tar.gz | tar xvz && \
    mv migrate /usr/local/bin/migrate

# Copy binary from builder
COPY --from=builder /app/chitchat-app .

# Copy migrations
COPY --from=builder /app/migrations ./migrations

# Create startup script
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo 'echo "Running database migrations..."' >> /app/start.sh && \
    echo 'migrate -path ./migrations -database "postgresql://postgres:password@db.ohmkgyozdbytxxlyfhot.supabase.co:5432/postgres?sslmode=disable" up' >> /app/start.sh && \
    echo 'echo "Starting application..."' >> /app/start.sh && \
    echo './chitchat-app' >> /app/start.sh && \
    chmod +x /app/start.sh

# Expose port
EXPOSE 4000

# Run the startup script
CMD ["/app/start.sh"]
